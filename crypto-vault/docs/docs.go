// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/retrieve": {
            "post": {
                "description": "Decrypt and return a stored private key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "summary": "Retrieve decrypted private key",
                "parameters": [
                    {
                        "description": "Retrieve Request (only username and password are required)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RetrieveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Decrypted key",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Decryption failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No such user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/store": {
            "post": {
                "description": "Encrypt and store a private key for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "summary": "Store encrypted private key",
                "parameters": [
                    {
                        "description": "Store Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.StoreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stored successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Encryption failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.RetrieveRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password used to decrypt the stored private key",
                    "type": "string"
                },
                "username": {
                    "description": "Username of the user",
                    "type": "string"
                }
            }
        },
        "main.StoreRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "The password used for encryption",
                    "type": "string"
                },
                "private_key": {
                    "description": "The private key to encrypt and store",
                    "type": "string"
                },
                "username": {
                    "description": "Username of the user",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Crypto Vault API",
	Description:      "This is a secure microservice to store and retrieve encrypted private keys.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
